import yts from "yt-search";
import ytdl from "ytdl-core";
import { PassThrough } from "stream";

const ytIdRegex = /(?:youtube\.com\/(?:watch\?v=|embed\/|v\/|shorts\/)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;

const toSansSerifPlain = (text = "") =>
  text
    .split("")
    .map((char) => {
      const map = {
        a: "ùñ∫", b: "ùñª", c: "ùñº", d: "ùñΩ", e: "ùñæ", f: "ùñø", g: "ùóÄ", h: "ùóÅ", i: "ùóÇ",
        j: "ùóÉ", k: "ùóÑ", l: "ùóÖ", m: "ùóÜ", n: "ùóá", o: "ùóà", p: "ùóâ", q: "ùóä", r: "ùóã",
        s: "ùóå", t: "ùóç", u: "ùóé", v: "ùóè", w: "ùóê", x: "ùóë", y: "ùóí", z: "ùóì",
        A: "ùñ†", B: "ùñ°", C: "ùñ¢", D: "ùñ£", E: "ùñ§", F: "ùñ•", G: "ùñ¶", H: "ùñß", I: "ùñ®",
        J: "ùñ©", K: "ùñ™", L: "ùñ´", M: "ùñ¨", N: "ùñ≠", O: "ùñÆ", P: "ùñØ", Q: "ùñ∞", R: "ùñ±",
        S: "ùñ≤", T: "ùñ≥", U: "ùñ¥", V: "ùñµ", W: "ùñ∂", X: "ùñ∑", Y: "ùñ∏", Z: "ùñπ",
        0: "ùü¢", 1: "ùü£", 2: "ùü§", 3: "ùü•", 4: "ùü¶", 5: "ùüß", 6: "ùü®", 7: "ùü©", 8: "ùü™", 9: "ùü´"
      };
      return map[char] || char;
    })
    .join("");

const formatViews = (views) => {
  if (views == null) return "Desconocido";
  if (views >= 1_000_000_000) return `${(views / 1_000_000_000).toFixed(1)}B`;
  if (views >= 1_000_000) return `${(views / 1_000_000).toFixed(1)}M`;
  if (views >= 1_000) return `${(views / 1_000).toFixed(1)}k`;
  return views.toString();
};

const safeSend = async (conn, chat, message, opts = {}) => {
  try {
    await conn.sendMessage(chat, message, opts);
  } catch (e) {
    console.warn("sendMessage fallo:", e?.message || e);
  }
};

const handler = async (m, { conn, text, command }) => {
  const query = (text || "").trim();
  if (!query) return m.reply(toSansSerifPlain("‚ú¶ Ingresa el nombre o link de un video."));

  // Reacci√≥n
  await safeSend(conn, m.chat, { react: { text: "üïê", key: m.key } });

  // Buscar video
  let video;
  try {
    const ytIdMatch = ytIdRegex.exec(query);
    const search = ytIdMatch ? await yts({ videoId: ytIdMatch[1] }) : await yts(query);
    video = ytIdMatch ? search.video : Array.isArray(search.all) ? search.all[0] : null;
  } catch (err) {
    console.error("Error buscando video:", err);
    return m.reply(toSansSerifPlain("‚ú¶ Error al buscar el video."));
  }

  if (!video) return m.reply(toSansSerifPlain("‚ú¶ No se encontr√≥ el video."));

  const {
    title = "Sin t√≠tulo",
    timestamp = "Desconocido",
    views = null,
    url = "",
    thumbnail = "",
    author = { name: "Desconocido" },
    ago = "Desconocido"
  } = video;

  // Construir caption informativo
  const infoCaption = [
    "‚úß‚îÄ‚îÄ‚îÄ ÔΩ• ÔΩ°Ôæü‚òÖ: *.‚ú¶ .* :‚òÖ. ‚îÄ‚îÄ‚îÄ‚úß",
    "‚ßº ·∞î·©ö ‚ßΩ  M U S I C  -  Y O U T U B E",
    "",
    `¬ª ‚úß ¬´ *${title}*`,
    `> ‚û© Canal ‚Ä∫ *${author.name}*`,
    `> ‚û© Duraci√≥n ‚Ä∫ *${timestamp}*`,
    `> ‚û© Vistas ‚Ä∫ *${formatViews(views)}*`,
    `> ‚û© Publicado ‚Ä∫ *${ago}*`,
    `> ‚û© Link ‚Ä∫ *${url}*`,
    "",
    command.toLowerCase() === "play"
      ? "> ‚ú∞ Enviando audio... ‚úß"
      : "> ‚ú∞ Enviando video (ytmp4)... ‚úß"
  ].join("\n");

  // Enviar mini info primero
  await safeSend(
    conn,
    m.chat,
    {
      image: { url: thumbnail },
      caption: infoCaption
    },
    { quoted: m }
  );

  // Descargar y enviar seg√∫n comando
  try {
    if (command.toLowerCase() === "play") {
      // Audio only
      const stream = ytdl(url, { filter: "audioonly", quality: "highestaudio" });
      const pass = new PassThrough();
      stream.pipe(pass);
      await safeSend(
        conn,
        m.chat,
        {
          audio: pass,
          mimetype: "audio/mpeg",
          fileName: `${title}.mp3`
        },
        { quoted: m }
      );
    } else if (command.toLowerCase() === "ytmp4") {
      // Video mp4 con audio integrado (progresivo)
      const stream = ytdl(url, {
        quality: "highest",
        filter: (f) => f.container === "mp4" && f.hasVideo && f.hasAudio
      });
      const pass = new PassThrough();
      stream.pipe(pass);
      await safeSend(
        conn,
        m.chat,
        {
          video: pass,
          caption: `‚úß Aqu√≠ tienes: *${title}* (ytmp4)`
        },
        { quoted: m }
      );
    } else {
      return m.reply(toSansSerifPlain("‚ú¶ Comando no reconocido. Usa 'play' para audio o 'ytmp4' para video."));
    }
  } catch (err) {
    console.error("Error en descarga/env√≠o:", err);
    return m.reply(toSansSerifPlain("‚ú¶ Fall√≥ la descarga. Intenta de nuevo m√°s tarde."));
  }
};

handler.command = ["play", "ytmp4"];
handler.register = true;
export default handler;
