import fetch from "node-fetch";
import yts from "yt-search";

const ytIdRegex = /(?:youtube\.com\/(?:watch\?v=|embed\/|v\/|shorts\/)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;

const toSansSerifPlain = (text = "") =>
  text
    .split("")
    .map((char) => {
      const map = {
        a: "ùñ∫", b: "ùñª", c: "ùñº", d: "ùñΩ", e: "ùñæ", f: "ùñø", g: "ùóÄ", h: "ùóÅ", i: "ùóÇ",
        j: "ùóÉ", k: "ùóÑ", l: "ùóÖ", m: "ùóÜ", n: "ùóá", o: "ùóà", p: "ùóâ", q: "ùóä", r: "ùóã",
        s: "ùóå", t: "ùóç", u: "ùóé", v: "ùóè", w: "ùóê", x: "ùóë", y: "ùóí", z: "ùóì",
        A: "ùñ†", B: "ùñ°", C: "ùñ¢", D: "ùñ£", E: "ùñ§", F: "ùñ•", G: "ùñ¶", H: "ùñß", I: "ùñ®",
        J: "ùñ©", K: "ùñ™", L: "ùñ´", M: "ùñ¨", N: "ùñ≠", O: "ùñÆ", P: "ùñØ", Q: "ùñ∞", R: "ùñ±",
        S: "ùñ≤", T: "ùñ≥", U: "ùñ¥", V: "ùñµ", W: "ùñ∂", X: "ùñ∑", Y: "ùñ∏", Z: "ùñπ",
        0: "ùü¢", 1: "ùü£", 2: "ùü§", 3: "ùü•", 4: "ùü¶", 5: "ùüß", 6: "ùü®", 7: "ùü©", 8: "ùü™", 9: "ùü´"
      };
      return map[char] || char;
    })
    .join("");

// Formatea vistas grandes
const formatViews = (views) => {
  if (views == null) return "Desconocido";
  if (typeof views !== "number") return views.toString();
  if (views >= 1_000_000_000) return `${(views / 1_000_000_000).toFixed(1)}B`;
  if (views >= 1_000_000) return `${(views / 1_000_000).toFixed(1)}M`;
  if (views >= 1_000) return `${(views / 1_000).toFixed(1)}k`;
  return views.toString();
};

// Sanitiza nombre de archivo
const sanitizeFileName = (name = "") => name.replace(/[<>:"/\\|?*\x00-\x1F]/g, "").slice(0, 50);

// Env√≠o seguro
const safeSend = async (conn, chat, message, opts = {}) => {
  try {
    await conn.sendMessage(chat, message, opts);
  } catch (e) {
    console.warn("sendMessage error:", e?.message || e);
  }
};

const handler = async (m, { conn, text = "", command }) => {
  const query = text.trim();
  if (!query) return m.reply(toSansSerifPlain("‚ú¶ Ingresa el nombre o link de un video."));

  // Reacci√≥n de espera
  await safeSend(conn, m.chat, { react: { text: "üïê", key: m.key } });

  // Buscar video en YouTube
  let video;
  try {
    const ytIdMatch = ytIdRegex.exec(query);
    const search = ytIdMatch ? await yts({ videoId: ytIdMatch[1] }) : await yts(query);
    video = ytIdMatch
      ? search.video
      : Array.isArray(search.all)
      ? search.all[0]
      : search.video;
  } catch (err) {
    console.error("Error en b√∫squeda:", err);
    return m.reply(toSansSerifPlain("‚ú¶ Error al buscar el video."));
  }

  if (!video) return m.reply(toSansSerifPlain("‚ú¶ No se encontr√≥ el video."));

  // Desestructurar con valores por defecto
  const {
    title = "Sin t√≠tulo",
    timestamp = "Desconocido",
    views = null,
    url = "",
    thumbnail = "",
    author = { name: "Desconocido" },
    ago = "Desconocido"
  } = video;

  const cleanTitle = sanitizeFileName(title);
  const vistas = formatViews(typeof views === "number" ? views : null);
  const canal = author?.name || "Desconocido";

  // Caption informativo
  const captionInfo = [
    "‚úß‚îÄ‚îÄ‚îÄ ÔΩ• ÔΩ°Ôæü‚òÖ: *.‚ú¶ .* :‚òÖ. ‚îÄ‚îÄ‚îÄ‚úß",
    "‚ßº ·∞î·©ö ‚ßΩ  M U S I C  -  Y O U T U B E",
    "",
    `¬ª ‚úß ¬´ *${title}*`,
    `> ‚û© Canal ‚Ä∫ *${canal}*`,
    `> ‚û© Duraci√≥n ‚Ä∫ *${timestamp}*`,
    `> ‚û© Vistas ‚Ä∫ *${vistas}*`,
    `> ‚û© Publicado ‚Ä∫ *${ago || "desconocido"}*`,
    `> ‚û© Link ‚Ä∫ *${url}*`,
    "",
    command.toLowerCase().includes("mp4")
      ? "> ‚ú∞ Descargando video (ytmp4)... ‚úß"
      : "> ‚ú∞ Descargando audio... ‚úß"
  ].join("\n");

  // Enviar la info primero
  await safeSend(
    conn,
    m.chat,
    {
      image: { url: thumbnail },
      caption: captionInfo
    },
    { quoted: m }
  );

  const lower = command.toLowerCase();

  // Ramas de audio vs video
  if (["play", "ytmp3", "playaudio", "yta"].includes(lower)) {
    // Audio v√≠a API de ytmp3
    try {
      const audioApi = `https://api.vreden.my.id/api/ytmp3?url=${encodeURIComponent(url)}`;
      const resp = await fetch(audioApi, { timeout: 30000 });
      if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
      const json = await resp.json();

      // Ajusta seg√∫n la estructura real: intento est√°ndar
      const audioUrl =
        json?.result?.download?.url ||
        json?.url ||
        json?.result?.url ||
        (json?.result && typeof json.result === "string" ? json.result : null);
      const audioTitle = json?.result?.title || title;

      if (!audioUrl) throw new Error("No se obtuvo URL de audio.");

      await safeSend(
        conn,
        m.chat,
        {
          audio: { url: audioUrl },
          mimetype: "audio/mpeg",
          fileName: `${sanitizeFileName(audioTitle)}.mp3`
        },
        { quoted: m }
      );
    } catch (e) {
      console.error("Error descargando audio:", e);
      return m.reply(
        m.chat,
        toSansSerifPlain("‚ö†Ô∏é No se pudo descargar el audio. Intenta m√°s tarde."),
        m
      );
    }
  } else if (["ytmp4", "ytv", "mp4"].includes(lower)) {
    // Video v√≠a endpoint de ytmp4
    try {
      const videoApi = `https://myapiadonix.vercel.app/api/ytmp4?url=${encodeURIComponent(url)}`;
      const resp = await fetch(videoApi, { timeout: 30000 });
      if (!resp.ok) throw new Error(`HTTP ${resp.status}`);
      const json = await resp.json();

      // Ajusta seg√∫n la respuesta real
      const videoUrl =
        json?.result?.download?.url ||
        json?.url ||
        json?.result?.url ||
        (json?.result && typeof json.result === "string" ? json.result : null);
      const videoTitle = json?.result?.title || title;

      if (!videoUrl) throw new Error("No se obtuvo URL de video.");

      await conn.sendMessage(
        m.chat,
        {
          video: { url: videoUrl },
          caption: `‚úß Aqu√≠ tienes: *${videoTitle}* (ytmp4)`
        },
        { quoted: m }
      );
    } catch (e) {
      console.error("Error descargando video:", e);
      return m.reply(
        m.chat,
        toSansSerifPlain("‚ö†Ô∏é No se pudo descargar el video. Intenta m√°s tarde."),
        m
      );
    }
  } else {
    return m.reply(
      toSansSerifPlain("‚ú¶ Usa `play`/`ytmp3` para audio o `ytmp4`/`mp4` para video."),
      m
    );
  }
};

handler.command = ["play", "ytmp3", "playaudio", "yta", "ytmp4", "ytv", "mp4"];
handler.register = true;
export default handler;